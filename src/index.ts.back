import express, { Request, Response } from "express";
import dotenv from "dotenv";
import { init } from "raspi";
import { Serial } from "raspi-serial";
const { Buffer } = require('node:buffer');

dotenv.config();
const PORT = process.env.PORT || 3000;

const app = express();

let LEFT_BOTTON_VOLUME = -127;
let RIGHT_BOTTON_VOLUME = 127;
let FRONT_BOTTON_VOLUME = 127;
let BACK_BOTTON_VOLUME = -127;

const motionBuffer = new ArrayBuffer(1);
const motion = new Uint8Array(motionBuffer);

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
export type Move =
  | "stop"
  | "front"
  | "back"
  | "left"
  | "right"
  | "leftTurn"
  | "rightTurn";

type ControllerData = {
  joystick_x: number,
  joystick_y: number,
  move: Move;
  // 回収
  collect: boolean,
  // 発射
  left_firing: boolean,
  right_firing: boolean,
  // 巻取り
  left_winding: boolean,
  right_winding: boolean,
};

let leftTurnFlag: boolean;
let rightTurnFlag: boolean;


init(() => {
  const serial = new Serial({
    portId: "/dev/serial0",
    baudRate: 115200,
    dataBits: 8,
    stopBits: 1,
    parity: "none"
  });
  serial.open(() => {
    console.log("Serial port opened.");

    serial.on('data', (data) => {
      console.log('Data received:', data.toString());
    });

    app.get("/ping", (request: Request, response: Response) => {
      response.status(200).send();
    });

    app.post("/send", (request: Request, response: Response) => {
      const data: ControllerData = request.body;
      console.log(data);


      // dataが1バイトの範囲内にあるかを確認
      //Math.max(0, Math.min(255, data.joystick_x));
      //Math.max(0, Math.min(255, data.joystick_y));

      // let byteDataX = Math.max(0, Math.min(255, data.x));
      // let byteDataY = Math.max(0, Math.min(255, data.y));

      if (data.move != "stop") {

        switch (data.move) {
          case "left":
            data.joystick_x = LEFT_BOTTON_VOLUME;
            data.joystick_y = 0;
            break;
          case "right":
            data.joystick_x = RIGHT_BOTTON_VOLUME;
            data.joystick_y = 0;
            break;
          case "front":
            data.joystick_x = 0;
            data.joystick_y = FRONT_BOTTON_VOLUME;
            break;
          case "back":
            data.joystick_x = 0;
            data.joystick_y = BACK_BOTTON_VOLUME;
            break;
          case "leftTurn":
            data.joystick_x = 0;
            data.joystick_y = 0;
            leftTurnFlag = true;
            rightTurnFlag = false;
            break;
          case "rightTurn":
            data.joystick_x = 0;
            data.joystick_y = 0;
            leftTurnFlag = false;
            rightTurnFlag = true;
            break;
        }
      }

      let value = 0; //初期化
      if (data.collect) { value |= (1 << 7); }
      if (data.right_firing) { value |= (1 << 6); }
      if (data.left_firing) { value |= (1 << 5); }
      if (leftTurnFlag) { value |= (1 << 4); }
      if (rightTurnFlag) { value |= (1 << 3); }
      // if (data.left_winding) { value |= (1 << 4); }
      // if (data.right_winding) { value |= (1 << 3); }

      motion[0] = value;

      // データを送信
      const sendBuffer = Buffer.from([0x02,3,data.joystick_x, data.joystick_y, motion[0],0x03]);
      console.log(sendBuffer);
      // serial.write("\n");
      serial.write(sendBuffer, () => {
        response.status(200).send();
      });
      // serial.write("\n");
    });

    app.listen(PORT, () => {
      console.log("Server running at PORT: ", PORT);
    }).on("error", (error) => {
      console.error('Server error:', error);
      process.exit(1);
    });
  });
});

